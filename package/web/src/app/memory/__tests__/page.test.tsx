import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import MemoryPage from '../page'
import { useMemoryThumbnails } from '@/hooks/useApi'
import { useConfig } from '@/contexts/ConfigContext'

// Mock hooks
jest.mock('@/hooks/useApi')
jest.mock('@/contexts/ConfigContext')

// Mock components
jest.mock('@/components/layout/MainLayout', () => ({
  MainLayout: ({ children }: { children: React.ReactNode }) => (
    <div data-testid="main-layout">{children}</div>
  ),
}))

jest.mock('@/components/memory/MemoryGame', () => ({
  MemoryGame: ({
    thumbnails,
    onGameComplete,
    difficulty,
    gameStats
  }: {
    thumbnails?: string[]
    onGameComplete?: (moves: number, time: number) => void
    difficulty: string
    gameStats?: { moves: number; time: number; score: number } | null
  }) => (
    <div data-testid="memory-game">
      <div data-testid="thumbnails-count">{thumbnails?.length || 0}</div>
      <div data-testid="difficulty">{difficulty}</div>
      <div data-testid="game-stats">{gameStats ? JSON.stringify(gameStats) : 'null'}</div>
      <button
        data-testid="mock-complete-game"
        onClick={() => onGameComplete?.(10, 30)}
      >
        Complete Game
      </button>
    </div>
  ),
}))

jest.mock('@/components/common/Loading', () => ({
  Loading: ({ label }: { label?: string }) => (
    <div data-testid="loading">{label || 'Loading...'}</div>
  ),
}))

jest.mock('@/components/common/ErrorMessage', () => ({
  ErrorMessage: ({ message, onRetry }: { message: string; onRetry?: () => void }) => (
    <div data-testid="error-message">
      <span>{message}</span>
      {onRetry && <button onClick={onRetry} data-testid="retry-button">Retry</button>}
    </div>
  ),
}))

// Mock HeroUI components
jest.mock('@heroui/react', () => ({
  Card: ({ children, onPress, className, isPressable, ...props }: React.PropsWithChildren<{
    onPress?: () => void
    className?: string
    isPressable?: boolean
    [key: string]: unknown
  }>) => {
    const handleClick = isPressable && onPress ? onPress : undefined
    return (
      <div
        data-testid="card"
        onClick={handleClick}
        className={className}
        data-pressable={isPressable}
        {...props}
      >
        {children}
      </div>
    )
  },
  CardBody: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="card-body" {...props}>
      {children}
    </div>
  ),
  Button: ({ children, onPress, color, variant, size, ...props }: React.PropsWithChildren<{
    onPress?: () => void
    color?: string
    variant?: string
    size?: string
    [key: string]: unknown
  }>) => (
    <button
      onClick={onPress}
      data-testid="button"
      data-color={color}
      data-variant={variant}
      data-size={size}
      {...props}
    >
      {children}
    </button>
  ),
  Modal: ({ children, isOpen, className, ...props }: React.PropsWithChildren<{
    isOpen?: boolean
    onClose?: () => void
    isDismissable?: boolean
    hideCloseButton?: boolean
    size?: string
    className?: string
    classNames?: Record<string, string>
    [key: string]: unknown
  }>) => {
    // DOM „Å´Ê∏°„Åô„Åπ„Åç„Åß„Å™„ÅÑ„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÈô§Â§ñ
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { isDismissable, hideCloseButton, size, classNames, onClose, ...validProps } = props
    return isOpen ? <div data-testid="modal" className={className} {...validProps}>{children}</div> : null
  },
  ModalContent: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-content" {...props}>{children}</div>
  ),
  ModalHeader: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-header" {...props}>{children}</div>
  ),
  ModalBody: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-body" {...props}>{children}</div>
  ),
  ModalFooter: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-footer" {...props}>{children}</div>
  ),
}))

// Mock Heroicons
jest.mock('@heroicons/react/24/outline', () => ({
  PuzzlePieceIcon: () => <div data-testid="puzzle-piece-icon" />,
  TrophyIcon: () => <div data-testid="trophy-icon" />,
  SparklesIcon: () => <div data-testid="sparkles-icon" />,
  FireIcon: () => <div data-testid="fire-icon" />,
  BoltIcon: () => <div data-testid="bolt-icon" />,
}))

const mockUseMemoryThumbnails = useMemoryThumbnails as jest.MockedFunction<typeof useMemoryThumbnails>
const mockUseConfig = useConfig as jest.MockedFunction<typeof useConfig>

describe('MemoryPage', () => {
  const mockThumbnails = {
    thumbnails: [
      'https://img.youtube.com/vi/video1/maxresdefault.jpg',
      'https://img.youtube.com/vi/video2/maxresdefault.jpg',
      'https://img.youtube.com/vi/video3/maxresdefault.jpg',
      'https://img.youtube.com/vi/video4/maxresdefault.jpg',
      'https://img.youtube.com/vi/video5/maxresdefault.jpg',
      'https://img.youtube.com/vi/video6/maxresdefault.jpg',
    ]
  }

  beforeEach(() => {
    jest.clearAllMocks()
    mockUseConfig.mockReturnValue({
      config: { NEXT_PUBLIC_API_URL: 'http://localhost:8000' },
      isLoading: false,
      error: null,
    })
    mockUseMemoryThumbnails.mockReturnValue({
      data: mockThumbnails,
      error: null,
      isLoading: false,
      mutate: jest.fn(),
    })
  })

  describe('ÂàùÊúüË°®Á§∫', () => {
    it('Èõ£ÊòìÂ∫¶ÈÅ∏Êäû„É¢„Éº„ÉÄ„É´„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<MemoryPage />)

      expect(screen.getByTestId('modal')).toBeInTheDocument()
      expect(screen.getByText('Èõ£ÊòìÂ∫¶„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument()
      expect(screen.getByText('„ÅÇ„Å™„Åü„ÅÆ„É¨„Éô„É´„Å´Âêà„Çè„Åõ„Å¶ÊåëÊà¶„Åó„Çà„ÅÜÔºÅ')).toBeInTheDocument()
    })

    it('3„Å§„ÅÆÈõ£ÊòìÂ∫¶ÈÅ∏ÊäûËÇ¢„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<MemoryPage />)

      expect(screen.getByText('ÂàùÁ¥ö')).toBeInTheDocument()
      expect(screen.getByText('‰∏≠Á¥ö')).toBeInTheDocument()
      expect(screen.getByText('‰∏äÁ¥ö')).toBeInTheDocument()
    })

    it('ÂêÑÈõ£ÊòìÂ∫¶„ÅÆË™¨Êòé„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<MemoryPage />)

      expect(screen.getByText('6„Éö„Ç¢ (12Êûö) - Ê∞óËªΩ„Å´Ê•Ω„Åó„ÇÇ„ÅÜ!')).toBeInTheDocument()
      expect(screen.getByText('8„Éö„Ç¢ (16Êûö) - „Å°„Çá„ÅÜ„Å©„ÅÑ„ÅÑÊåëÊà¶!')).toBeInTheDocument()
      expect(screen.getByText('12„Éö„Ç¢ (24Êûö) - Áúü„ÅÆÂÆüÂäõ„ÇíË©¶„Åù„ÅÜ!')).toBeInTheDocument()
    })

    it('„Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„ÅÆË™¨Êòé„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<MemoryPage />)

      expect(screen.getByText('üëÜ „Çø„ÉÉ„Éó„Åó„Å¶ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ üëÜ')).toBeInTheDocument()
      expect(screen.getByText(/„Ç≠„Éº„Éú„Éº„Éâ:/)).toBeInTheDocument()
    })
  })

  describe('Èõ£ÊòìÂ∫¶ÈÅ∏Êäû', () => {
    it('ÂàùÁ¥ö„ÇíÈÅ∏Êäû„Åô„Çã„Å®„É¢„Éº„ÉÄ„É´„ÅåÈñâ„Åò„Å¶6„Éö„Ç¢Áî®„ÅÆ„Ç≤„Éº„É†„ÅåÈñãÂßã„Åï„Çå„Çã', async () => {
      render(<MemoryPage />)

      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      expect(beginnerCard).toBeInTheDocument()

      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        expect(screen.queryByTestId('modal')).not.toBeInTheDocument()
      })

      expect(screen.getByTestId('difficulty')).toHaveTextContent('beginner')
    })

    it('‰∏≠Á¥ö„ÇíÈÅ∏Êäû„Åô„Çã„Å®8„Éö„Ç¢Áî®„ÅÆ„Ç≤„Éº„É†„ÅåÈñãÂßã„Åï„Çå„Çã', async () => {
      render(<MemoryPage />)

      const intermediateCard = screen.getByText('‰∏≠Á¥ö').closest('[data-testid="card"]')
      fireEvent.click(intermediateCard!)

      await waitFor(() => {
        expect(screen.queryByTestId('modal')).not.toBeInTheDocument()
      })

      expect(screen.getByTestId('difficulty')).toHaveTextContent('intermediate')
    })

    it('‰∏äÁ¥ö„ÇíÈÅ∏Êäû„Åô„Çã„Å®12„Éö„Ç¢Áî®„ÅÆ„Ç≤„Éº„É†„ÅåÈñãÂßã„Åï„Çå„Çã', async () => {
      render(<MemoryPage />)

      const advancedCard = screen.getByText('‰∏äÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(advancedCard!)

      await waitFor(() => {
        expect(screen.queryByTestId('modal')).not.toBeInTheDocument()
      })

      expect(screen.getByTestId('difficulty')).toHaveTextContent('advanced')
    })

    it('„Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„ÅßÈõ£ÊòìÂ∫¶„ÇíÈÅ∏Êäû„Åß„Åç„Çã', async () => {
      render(<MemoryPage />)

      // '1'„Ç≠„Éº„ÅßÂàùÁ¥öÈÅ∏Êäû
      fireEvent.keyDown(window, { key: '1' })

      await waitFor(() => {
        expect(screen.queryByTestId('modal')).not.toBeInTheDocument()
      })

      expect(screen.getByTestId('difficulty')).toHaveTextContent('beginner')
    })
  })

  describe('„Ç≤„Éº„É†Ë®≠ÂÆö', () => {
    it('Èõ£ÊòìÂ∫¶ÈÅ∏ÊäûÂæå„Å´ÁèæÂú®„ÅÆÈõ£ÊòìÂ∫¶„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      render(<MemoryPage />)

      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        expect(screen.getByText('ÁèæÂú®„ÅÆÈõ£ÊòìÂ∫¶: ÂàùÁ¥ö')).toBeInTheDocument()
      })
    })

    it('„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', async () => {
      const mockMutate = jest.fn()
      mockUseMemoryThumbnails.mockReturnValue({
        data: mockThumbnails,
        error: null,
        isLoading: false,
        mutate: mockMutate,
      })

      render(<MemoryPage />)

      // Èõ£ÊòìÂ∫¶ÈÅ∏Êäû
      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      // „Ç≤„Éº„É†ÂÆå‰∫Ü„ÇíÂÖà„Å´„Ç∑„Éü„É•„É¨„Éº„Éà
      await waitFor(() => {
        const completeButton = screen.getByTestId('mock-complete-game')
        fireEvent.click(completeButton)
      })

      // „Ç≤„Éº„É†ÂÆå‰∫ÜÂæå„Å´„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      await waitFor(() => {
        const resetButton = screen.getByText('üîÑ „É™„Çª„ÉÉ„Éà')
        fireEvent.click(resetButton)
      })

      expect(mockMutate).toHaveBeenCalled()
    })

    it('Èõ£ÊòìÂ∫¶Â§âÊõ¥„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', async () => {
      render(<MemoryPage />)

      // Èõ£ÊòìÂ∫¶ÈÅ∏Êäû
      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        const changeDifficultyButton = screen.getByText('Èõ£ÊòìÂ∫¶Â§âÊõ¥')
        fireEvent.click(changeDifficultyButton)
      })

      // „É¢„Éº„ÉÄ„É´„ÅåÂÜçË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByTestId('modal')).toBeInTheDocument()
    })
  })

  describe('„Çπ„Ç≥„Ç¢Ë®àÁÆó', () => {
    it('„Ç≤„Éº„É†ÂÆå‰∫ÜÊôÇ„Å´„Çπ„Ç≥„Ç¢„ÅåÊ≠£„Åó„ÅèË®àÁÆó„Åï„Çå„Çã', async () => {
      render(<MemoryPage />)

      // Èõ£ÊòìÂ∫¶ÈÅ∏Êäû
      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        // „Ç≤„Éº„É†ÂÆå‰∫Ü„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
        const completeButton = screen.getByTestId('mock-complete-game')
        fireEvent.click(completeButton)
      })

      // „Çπ„Ç≥„Ç¢„ÅåË°®Á§∫„Åï„Çå„Çã
      await waitFor(() => {
        expect(screen.getByText('üéâ „Ç≤„Éº„É†„ÇØ„É™„Ç¢ÔºÅ')).toBeInTheDocument()
        expect(screen.getByText('Á¥†Êô¥„Çâ„Åó„ÅÑ„Éó„É¨„Ç§„Åß„Åó„ÅüÔºÅ')).toBeInTheDocument()
      })

      // ÊâãÊï∞„ÄÅÊôÇÈñì„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('10')).toBeInTheDocument() // ÊâãÊï∞
      expect(screen.getByText('0:30')).toBeInTheDocument() // ÊôÇÈñì
    })

    it('„Çπ„Ç≥„Ç¢Ë®àÁÆó„É≠„Ç∏„ÉÉ„ÇØ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„ÇãÔºàÊôÇÈñì„Éú„Éº„Éä„ÇπÔºâ', async () => {
      render(<MemoryPage />)

      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        const completeButton = screen.getByTestId('mock-complete-game')
        fireEvent.click(completeButton)
      })

      // „Çπ„Ç≥„Ç¢„ÅÆË®àÁÆóÁ¢∫Ë™çÔºàÂÆüÈöõ„ÅÆË®àÁÆóÁµêÊûú„ÅØÂÆüË£Ö‰æùÂ≠òÔºâ
      await waitFor(() => {
        const gameStatsElement = screen.getByTestId('game-stats')
        const gameStats = JSON.parse(gameStatsElement.textContent!)
        expect(gameStats.score).toBeGreaterThan(0)
      })
    })
  })

  describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
    it('Ë®≠ÂÆöË™≠„ÅøËæº„Åø„Ç®„É©„ÉºÊôÇ„Å´„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseConfig.mockReturnValue({
        config: null,
        isLoading: false,
        error: new Error('Failed to load config'),
      })

      render(<MemoryPage />)

      expect(screen.getByTestId('error-message')).toBeInTheDocument()
      expect(screen.getByText('Ë®≠ÂÆö„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')).toBeInTheDocument()
    })

    it('„Çµ„É†„Éç„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„ÉºÊôÇ„Å´„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      mockUseMemoryThumbnails.mockReturnValue({
        data: null,
        error: new Error('Failed to load thumbnails'),
        isLoading: false,
        mutate: jest.fn(),
      })

      render(<MemoryPage />)

      // Èõ£ÊòìÂ∫¶ÈÅ∏Êäû
      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        expect(screen.getByText('„Ç≤„Éº„É†Áî®ÁîªÂÉè„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')).toBeInTheDocument()
      })
    })

    it('„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseConfig.mockReturnValue({
        config: null,
        isLoading: true,
        error: null,
      })

      render(<MemoryPage />)

      expect(screen.getByTestId('loading')).toBeInTheDocument()
    })

    it('„Çµ„É†„Éç„Ç§„É´Ë™≠„ÅøËæº„Åø‰∏≠„ÅÆ„É≠„Éº„Éá„Ç£„É≥„Ç∞„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      mockUseMemoryThumbnails.mockReturnValue({
        data: null,
        error: null,
        isLoading: true,
        mutate: jest.fn(),
      })

      render(<MemoryPage />)

      // Èõ£ÊòìÂ∫¶ÈÅ∏Êäû
      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        expect(screen.getByText('„Ç≤„Éº„É†Áî®ÁîªÂÉè„ÇíÊ∫ñÂÇô‰∏≠...')).toBeInTheDocument()
      })
    })
  })

  describe('APIÈÄ£Êê∫', () => {
    it('ÈÅ∏Êäû„Åó„ÅüÈõ£ÊòìÂ∫¶„Å´Âøú„Åò„Å¶Ê≠£„Åó„ÅÑ„Éö„Ç¢Êï∞„ÅßAPI„ÅåÂëº„Å∞„Çå„Çã', async () => {
      render(<MemoryPage />)

      // ÂàùÁ¥öÈÅ∏ÊäûÔºà6„Éö„Ç¢Ôºâ
      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        expect(mockUseMemoryThumbnails).toHaveBeenCalledWith(6)
      })
    })

    it('Èõ£ÊòìÂ∫¶Â§âÊõ¥ÊôÇ„Å´Êñ∞„Åó„ÅÑ„Éö„Ç¢Êï∞„ÅßAPI„ÅåÂëº„Å∞„Çå„Çã', async () => {
      render(<MemoryPage />)

      // ÂàùÁ¥öÈÅ∏Êäû
      const beginnerCard = screen.getByText('ÂàùÁ¥ö').closest('[data-testid="card"]')
      fireEvent.click(beginnerCard!)

      await waitFor(() => {
        // Èõ£ÊòìÂ∫¶Â§âÊõ¥
        const changeDifficultyButton = screen.getByText('Èõ£ÊòìÂ∫¶Â§âÊõ¥')
        fireEvent.click(changeDifficultyButton)
      })

      // ‰∏≠Á¥öÈÅ∏Êäû
      const intermediateCard = screen.getByText('‰∏≠Á¥ö').closest('[data-testid="card"]')
      fireEvent.click(intermediateCard!)

      await waitFor(() => {
        expect(mockUseMemoryThumbnails).toHaveBeenCalledWith(8)
      })
    })
  })
})

import React from 'react'
