import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
import { MemoryGame } from '@/components/memory/MemoryGame'
import MemoryPage from '@/app/memory/page'
import { useRouter } from 'next/navigation'
import { useConfig } from '@/contexts/ConfigContext'
import { useMemoryThumbnails } from '@/hooks/useApi'

// Mock dependencies
jest.mock('next/navigation', () => ({
  useRouter: jest.fn(),
}))

jest.mock('@/contexts/ConfigContext', () => ({
  useConfig: jest.fn(),
}))

jest.mock('@/hooks/useApi', () => ({
  useMemoryThumbnails: jest.fn(),
}))

jest.mock('@heroui/react', () => ({
  Card: ({ children, onPress, className, isPressable, ...props }: React.PropsWithChildren<{
    onPress?: () => void
    className?: string
    isPressable?: boolean
    [key: string]: unknown
  }>) => {
    const handleClick = isPressable && onPress ? onPress : undefined
    return (
      <div
        data-testid={props['data-testid'] || 'card'}
        onClick={handleClick}
        className={className}
        data-pressable={isPressable}
        {...props}
      >
        {children}
      </div>
    )
  },
  CardBody: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="card-body" {...props}>
      {children}
    </div>
  ),
  Button: ({ children, onPress, startContent, ...props }: React.PropsWithChildren<{
    onPress?: () => void
    startContent?: React.ReactNode
    [key: string]: unknown
  }>) => (
    <button onClick={onPress} data-testid="button" {...props}>
      {startContent && <span data-testid="button-icon">{startContent}</span>}
      {children}
    </button>
  ),
  Chip: ({ children, startContent, className, ...props }: React.PropsWithChildren<{
    startContent?: React.ReactNode
    className?: string
    [key: string]: unknown
  }>) => (
    <div data-testid="chip" className={className} {...props}>
      {startContent && <span data-testid="chip-icon">{startContent}</span>}
      {children}
    </div>
  ),
  Modal: ({ children, isOpen, classNames, ...props }: React.PropsWithChildren<{
    isOpen: boolean
    classNames?: Record<string, string>
    [key: string]: unknown
  }>) => (
    isOpen ? (
      <div data-testid="modal" className={classNames?.backdrop} {...props}>
        {children}
      </div>
    ) : null
  ),
  ModalContent: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-content" {...props}>
      {children}
    </div>
  ),
  ModalHeader: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-header" {...props}>
      {children}
    </div>
  ),
  ModalBody: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-body" {...props}>
      {children}
    </div>
  ),
  ModalFooter: ({ children, ...props }: React.PropsWithChildren<Record<string, unknown>>) => (
    <div data-testid="modal-footer" {...props}>
      {children}
    </div>
  ),
}))

jest.mock('@heroicons/react/24/outline', () => ({
  ArrowPathIcon: () => <div data-testid="arrow-path-icon" />,
  ClockIcon: () => <div data-testid="clock-icon" />,
  HeartIcon: () => <div data-testid="heart-icon" />,
  StarIcon: () => <div data-testid="star-icon" />,
  FireIcon: () => <div data-testid="fire-icon" />,
  PuzzlePieceIcon: () => <div data-testid="puzzle-piece-icon" />,
  TrophyIcon: () => <div data-testid="trophy-icon" />,
  SparklesIcon: () => <div data-testid="sparkles-icon" />,
  BoltIcon: () => <div data-testid="bolt-icon" />,
}))

jest.mock('@/components/layout/MainLayout', () => {
  return {
    MainLayout: ({ children }: { children: React.ReactNode }) => (
      <div data-testid="main-layout">{children}</div>
    )
  }
})

jest.mock('@/components/common/Loading', () => ({
  Loading: ({ label }: { label?: string }) => (
    <div data-testid="loading">{label || 'Loading...'}</div>
  ),
}))

jest.mock('@/components/common/ErrorMessage', () => ({
  ErrorMessage: ({ message, onRetry }: { message: string; onRetry?: () => void }) => (
    <div data-testid="error-message">
      <span>{message}</span>
      {onRetry && <button onClick={onRetry} data-testid="retry-button">ÂÜçË©¶Ë°å</button>}
    </div>
  ),
}))

describe('Memory Game - User Experience Flows', () => {
  const mockPush = jest.fn()
  const mockMutate = jest.fn()

  const mockThumbnails = [
    'https://img.youtube.com/vi/video1/maxresdefault.jpg',
    'https://img.youtube.com/vi/video2/maxresdefault.jpg',
    'https://img.youtube.com/vi/video3/maxresdefault.jpg',
    'https://img.youtube.com/vi/video4/maxresdefault.jpg',
    'https://img.youtube.com/vi/video5/maxresdefault.jpg',
    'https://img.youtube.com/vi/video6/maxresdefault.jpg',
  ]

  beforeEach(() => {
    jest.clearAllMocks()
    jest.useFakeTimers()

      ; (useRouter as jest.Mock).mockReturnValue({
        push: mockPush,
      })

      ; (useConfig as jest.Mock).mockReturnValue({
        isLoading: false,
        error: null,
      })

      ; (useMemoryThumbnails as jest.Mock).mockReturnValue({
        data: { thumbnails: mockThumbnails },
        error: null,
        isLoading: false,
        mutate: mockMutate,
      })

    // Silence console.log during tests
    jest.spyOn(console, 'log').mockImplementation(() => { })
    jest.spyOn(console, 'error').mockImplementation(() => { })
  })

  afterEach(() => {
    jest.useRealTimers()
    jest.restoreAllMocks()
  })

  describe('üéÆ ÂÆåÂÖ®„Å™„Ç≤„Éº„É†„Éó„É¨„Ç§„Éï„É≠„Éº', () => {
    it('Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº„ÅåÂàùÁ¥ö„ÅßÂÆåÂÖ®„Å™„Ç≤„Éº„É†„Çí‰ΩìÈ®ì„Åô„Çã', async () => {
      render(<MemoryPage />)

      // 1. Èõ£ÊòìÂ∫¶ÈÅ∏ÊäûÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByTestId('modal')).toBeInTheDocument()
      expect(screen.getByText('Èõ£ÊòìÂ∫¶„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument()

      // 2. ÂàùÁ¥ö„ÇíÈÅ∏Êäû
      const beginnerButton = screen.getByText('ÂàùÁ¥ö')
      expect(beginnerButton).toBeInTheDocument()

      await act(async () => {
        fireEvent.click(beginnerButton)
      })

      // 3. „Ç≤„Éº„É†ÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„Çã
      await waitFor(() => {
        expect(screen.getByText('üß† Á•ûÁµåË°∞Âº±„Ç≤„Éº„É†')).toBeInTheDocument()
        expect(screen.getByText('ÁèæÂú®„ÅÆÈõ£ÊòìÂ∫¶: ÂàùÁ¥ö')).toBeInTheDocument()
      })

      // 4. ÂàùÊúüÁä∂ÊÖãÁ¢∫Ë™çÔºö12Êûö„ÅÆ„Ç´„Éº„Éâ„ÅåË£èÂêë„Åç„ÅßË°®Á§∫
      await waitFor(() => {
        const questionMarks = screen.getAllByText('?')
        expect(questionMarks).toHaveLength(12)
      })

      // 5. „Çø„Ç§„Éû„Éº„Åå0:00„Åã„ÇâÂßã„Åæ„Å£„Å¶„ÅÑ„Çã
      expect(screen.getByText('0:00')).toBeInTheDocument()
      expect(screen.getByText('ÊâãÊï∞: 0')).toBeInTheDocument()
    })

    it('„É¶„Éº„Ç∂„Éº„Åå„Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„ÅßÈõ£ÊòìÂ∫¶„ÇíÈÅ∏Êäû„Åô„Çã', async () => {
      render(<MemoryPage />)

      // Èõ£ÊòìÂ∫¶ÈÅ∏ÊäûÁîªÈù¢„Åß„Ç≠„Éº„Éú„Éº„ÉâÊìç‰Ωú
      await act(async () => {
        fireEvent.keyDown(window, { key: '2' })
      })

      await waitFor(() => {
        expect(screen.getByText('ÁèæÂú®„ÅÆÈõ£ÊòìÂ∫¶: ‰∏≠Á¥ö')).toBeInTheDocument()
      })
    })
  })

  describe('üì± „É¢„Éê„Ç§„É´„É¨„Çπ„Éù„É≥„Ç∑„Éñ‰ΩìÈ®ì', () => {
    beforeEach(() => {
      // „É¢„Éê„Ç§„É´„Éì„É•„Éº„Éù„Éº„Éà„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 375,
      })
      Object.defineProperty(window, 'innerHeight', {
        writable: true,
        configurable: true,
        value: 667,
      })
    })

    it('„É¢„Éê„Ç§„É´„ÅßÈõ£ÊòìÂ∫¶ÈÅ∏ÊäûÁîªÈù¢„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', async () => {
      render(<MemoryPage />)

      // „É¢„Éº„ÉÄ„É´„ÅåÂÖ®ÁîªÈù¢„ÅßË°®Á§∫„Åï„Çå„Çã
      const modal = screen.getByTestId('modal')
      expect(modal).toBeInTheDocument()

      // 3„Å§„ÅÆÈõ£ÊòìÂ∫¶„Ç™„Éó„Ç∑„Éß„É≥„ÅåÂÖ®„Å¶Ë°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('ÂàùÁ¥ö')).toBeInTheDocument()
      expect(screen.getByText('‰∏≠Á¥ö')).toBeInTheDocument()
      expect(screen.getByText('‰∏äÁ¥ö')).toBeInTheDocument()

      // „Çø„ÉÉ„ÉóË™¨ÊòéÊñá„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('üëÜ „Çø„ÉÉ„Éó„Åó„Å¶ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ üëÜ')).toBeInTheDocument()
    })

    it('„É¢„Éê„Ç§„É´„Åß„Ç≤„Éº„É†„Ç´„Éº„Éâ„ÅåÈÅ©Âàá„Å™„Ç∞„É™„ÉÉ„Éâ„ÅßË°®Á§∫„Åï„Çå„Çã', async () => {
      render(<MemoryPage />)

      // ÂàùÁ¥ö„ÇíÈÅ∏Êäû
      await act(async () => {
        fireEvent.click(screen.getByText('ÂàùÁ¥ö'))
      })

      // „Ç≤„Éº„É†ÁîªÈù¢„Åß„É¢„Éê„Ç§„É´Âêë„Åë„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÈÅ©Áî®„Åï„Çå„Çã
      await waitFor(() => {
        const gameBoard = screen.getByTestId('game-board')
        expect(gameBoard).toBeInTheDocument()
      })
    })
  })

  describe('üîÑ „Ç≤„Éº„É†Êìç‰Ωú„Éï„É≠„Éº', () => {
    it('„É™„Çª„ÉÉ„ÉàÊ©üËÉΩ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      render(<MemoryPage />)

      // ÂàùÁ¥ö„ÇíÈÅ∏Êäû„Åó„Å¶„Ç≤„Éº„É†ÈñãÂßã
      await act(async () => {
        fireEvent.click(screen.getByText('ÂàùÁ¥ö'))
      })

      // „Ç´„Éº„Éâ„Çí1Êûö„ÇØ„É™„ÉÉ„ÇØ
      await waitFor(() => {
        const cards = screen.getAllByTestId('game-card')
        fireEvent.click(cards[0])
      })

      // „Çø„Ç§„Éû„Éº„ÇíÈÄ≤„ÇÅ„Çã
      act(() => {
        jest.advanceTimersByTime(5000)
      })

      // „É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const resetButton = screen.getByText('„É™„Çª„ÉÉ„Éà')
      await act(async () => {
        fireEvent.click(resetButton)
      })

      // „Ç≤„Éº„É†„ÅåÂàùÊúüÁä∂ÊÖã„Å´Êàª„Çã
      await waitFor(() => {
        expect(screen.getByText('0:00')).toBeInTheDocument()
        expect(screen.getByText('ÊâãÊï∞: 0')).toBeInTheDocument()
        expect(mockMutate).toHaveBeenCalled()
      })
    })

    it('Èõ£ÊòìÂ∫¶Â§âÊõ¥Ê©üËÉΩ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      render(<MemoryPage />)

      // ÂàùÁ¥ö„ÇíÈÅ∏Êäû
      await act(async () => {
        fireEvent.click(screen.getByText('ÂàùÁ¥ö'))
      })

      // Èõ£ÊòìÂ∫¶Â§âÊõ¥„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const changeDifficultyButton = screen.getByText('Èõ£ÊòìÂ∫¶Â§âÊõ¥')
      await act(async () => {
        fireEvent.click(changeDifficultyButton)
      })

      // Èõ£ÊòìÂ∫¶ÈÅ∏ÊäûÁîªÈù¢„ÅåÂÜçË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByTestId('modal')).toBeInTheDocument()
      expect(screen.getByText('Èõ£ÊòìÂ∫¶„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument()
    })
  })

  describe('üéØ „Ç≤„Éº„É†ÂÆå‰∫Ü„Å®„ÇÆ„É£„É©„É™„Éº‰ΩìÈ®ì', () => {
    it('„Ç≤„Éº„É†ÂÆå‰∫ÜÂæå„ÅÆ„ÇÆ„É£„É©„É™„ÉºÈÅ∑Áßª„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      const mockGameStats = { moves: 12, time: 60, score: 1500 }

      render(
        <MemoryGame
          thumbnails={mockThumbnails}
          difficulty="beginner"
          gameStats={mockGameStats}
        />
      )

      // „Ç≤„Éº„É†ÂÆå‰∫ÜÁä∂ÊÖã„Çí„Ç∑„Éü„É•„É¨„Éº„ÉàÔºàshowThumbnails=true„Å´„Åô„ÇãÔºâ
      // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØuseEffect„ÅßshowThumbnails„Ååtrue„Å´„Å™„Çã
      await waitFor(() => {
        // „ÇÆ„É£„É©„É™„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åã„Å©„ÅÜ„Åã„ÅØÂÜÖÈÉ®Áä∂ÊÖã„Å´‰æùÂ≠ò„Åô„Çã„Åü„ÇÅ„ÄÅ
        // „Åì„Åì„Åß„ÅØ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÊ≠£Â∏∏„Å´„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        expect(screen.getByText('üß† Á•ûÁµåË°∞Âº±„Ç≤„Éº„É†')).toBeInTheDocument()
      })
    })
  })

  describe('‚ö†Ô∏è „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
    it('APIË™≠„ÅøËæº„Åø„Ç®„É©„ÉºÊôÇ„ÅÆÈÅ©Âàá„Å™Ë°®Á§∫', async () => {
      ; (useMemoryThumbnails as jest.Mock).mockReturnValue({
        data: null,
        error: new Error('Network error'),
        isLoading: false,
        mutate: mockMutate,
      })

      render(<MemoryPage />)

      // ÂàùÁ¥ö„ÇíÈÅ∏Êäû
      await act(async () => {
        fireEvent.click(screen.getByText('ÂàùÁ¥ö'))
      })

      // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã
      await waitFor(() => {
        expect(screen.getByTestId('error-message')).toBeInTheDocument()
        expect(screen.getByText('„Ç≤„Éº„É†Áî®ÁîªÂÉè„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')).toBeInTheDocument()
      })

      // ÂÜçË©¶Ë°å„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã
      const retryButton = screen.getByTestId('retry-button')
      await act(async () => {
        fireEvent.click(retryButton)
      })
      expect(mockMutate).toHaveBeenCalled()
    })

    it('Ë®≠ÂÆöË™≠„ÅøËæº„Åø„Ç®„É©„ÉºÊôÇ„ÅÆÈÅ©Âàá„Å™Ë°®Á§∫', async () => {
      ; (useConfig as jest.Mock).mockReturnValue({
        isLoading: false,
        error: new Error('Config error'),
      })

      render(<MemoryPage />)

      expect(screen.getByTestId('error-message')).toBeInTheDocument()
      expect(screen.getByText('Ë®≠ÂÆö„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')).toBeInTheDocument()
    })

    it('„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÅÆÈÅ©Âàá„Å™Ë°®Á§∫', async () => {
      ; (useConfig as jest.Mock).mockReturnValue({
        isLoading: true,
        error: null,
      })

      render(<MemoryPage />)

      expect(screen.getByTestId('loading')).toBeInTheDocument()
    })
  })

  describe('‚ôø „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£', () => {
    it('„Ç≠„Éº„Éú„Éº„Éâ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅåÊ©üËÉΩ„Åô„Çã', async () => {
      render(<MemoryPage />)

      // ESC„Ç≠„Éº„Çí„ÉÜ„Çπ„ÉàÔºà„É¢„Éº„ÉÄ„É´„ÅØÈñâ„Åò„Çâ„Çå„Å™„ÅÑ„Åå„ÄÅ„Ç§„Éô„É≥„Éà„ÅØÂá¶ÁêÜ„Åï„Çå„ÇãÔºâ
      await act(async () => {
        fireEvent.keyDown(window, { key: 'Escape' })
      })

      // Êï∞Â≠ó„Ç≠„Éº„Åß„ÅÆÈÅ∏Êäû
      await act(async () => {
        fireEvent.keyDown(window, { key: '1' })
      })

      await waitFor(() => {
        expect(screen.getByText('ÁèæÂú®„ÅÆÈõ£ÊòìÂ∫¶: ÂàùÁ¥ö')).toBeInTheDocument()
      })
    })

    it('„Éú„Çø„É≥„ÇÑ„Ç´„Éº„Éâ„ÅåÈÅ©Âàá„Å™ariaÂ±ûÊÄß„ÇíÊåÅ„Å§', async () => {
      render(<MemoryPage />)

      // ÂàùÁ¥ö„ÇíÈÅ∏Êäû
      await act(async () => {
        fireEvent.click(screen.getByText('ÂàùÁ¥ö'))
      })

      await waitFor(() => {
        const gameCards = screen.getAllByTestId('game-card')
        expect(gameCards.length).toBeGreaterThan(0)

        // „Ç´„Éº„Éâ„Åå„ÇØ„É™„ÉÉ„ÇØÂèØËÉΩ„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        gameCards.forEach(card => {
          expect(card).toBeInTheDocument()
        })
      })
    })
  })

  describe('üîç „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÈñ¢ÈÄ£', () => {
    it('Â§ßÈáè„ÅÆ„Ç´„Éº„ÉâÊìç‰Ωú„Åß„ÇÇÂÆâÂÆöÂãï‰Ωú„Åô„Çã', async () => {
      const largeThumbnails = Array.from({ length: 24 }, (_, i) =>
        `https://img.youtube.com/vi/video${i + 1}/maxresdefault.jpg`
      )

        ; (useMemoryThumbnails as jest.Mock).mockReturnValue({
          data: { thumbnails: largeThumbnails },
          error: null,
          isLoading: false,
          mutate: mockMutate,
        })

      render(<MemoryPage />)

      // ‰∏äÁ¥ö„ÇíÈÅ∏ÊäûÔºà24ÊûöÔºâ
      await act(async () => {
        fireEvent.click(screen.getByText('‰∏äÁ¥ö'))
      })

      // 24Êûö„ÅÆ„Ç´„Éº„Éâ„ÅåË°®Á§∫„Åï„Çå„Çã
      await waitFor(() => {
        const questionMarks = screen.getAllByText('?')
        expect(questionMarks).toHaveLength(24)
      })

      // Ë§áÊï∞„ÅÆ„Ç´„Éº„Éâ„ÇíÈ´òÈÄü„Åß„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„ÇÇÂïèÈ°å„Å™„ÅÑ
      const cards = screen.getAllByTestId('game-card')
      for (let i = 0; i < 5; i++) {
        await act(async () => {
          fireEvent.click(cards[i])
        })
      }

      // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Çã
      expect(screen.getByText('üß† Á•ûÁµåË°∞Âº±„Ç≤„Éº„É†')).toBeInTheDocument()
    })
  })
})

// React import for JSX
import React from 'react'
