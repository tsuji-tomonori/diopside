version: "3"

env:
  AWS_PROFILE: "default"

tasks:
  install-deps:
    desc: "Install Lambda layer dependencies from backend"
    dir: infrastructure
    cmds:
      - mkdir -p .layers/python
      - cd ../backend && uv export --no-hashes --no-dev | grep -v "^-e" > ../infrastructure/.layers/requirements.txt
      - uv pip install -r .layers/requirements.txt --target .layers/python --no-cache-dir --python-version 3.13

  clean:
    desc: "Clean build artifacts"
    dir: infrastructure
    cmds:
      - rm -rf .layers
      - rm -rf cdk.out

  diff:
    desc: "Show CDK diff"
    deps: [install-deps]
    dir: infrastructure
    cmds:
      - uv run cdk diff ShirayukiTomoFansiteStack

  synth:
    desc: "Synthesize CDK templates"
    deps: [install-deps]
    dir: infrastructure
    cmds:
      - uv run cdk synth ShirayukiTomoFansiteStack

  deploy:
    desc: "Deploy main stack"
    deps: [install-deps]
    dir: infrastructure
    cmds:
      - uv run cdk deploy ShirayukiTomoFansiteStack --require-approval never

  bootstrap:
    desc: "Bootstrap CDK environment"
    dir: infrastructure
    cmds:
      - uv run cdk bootstrap aws://$(aws sts get-caller-identity --query Account --output text)/ap-northeast-1

  destroy:
    desc: "Destroy main stack"
    dir: infrastructure
    cmds:
      - uv run cdk destroy ShirayukiTomoFansiteStack --force

  lint:
    desc: "Run linting and type checking"
    dir: infrastructure
    cmds:
      - uv run ruff check .
      - uv run ruff format --check .
      - uv run mypy stacks/

  test:
    desc: "Run tests"
    dir: infrastructure
    cmds:
      - uv run pytest tests/

  # Backend tasks
  backend:lint:
    desc: "Run backend linting and type checking"
    dir: backend
    cmds:
      - uv run ruff check .
      - uv run ruff format --check .
      - uv run mypy app/

  backend:test:
    desc: "Run backend tests"
    dir: backend
    cmds:
      - uv run pytest tests/

  backend:dev:
    desc: "Run backend development server"
    dir: backend
    cmds:
      - uv run python main.py

  # Frontend tasks
  frontend:install:
    desc: "Install frontend dependencies"
    dir: frontend
    cmds:
      - npm install

  frontend:dev:
    desc: "Run frontend development server"
    dir: frontend
    cmds:
      - npm run dev

  frontend:build:
    desc: "Build frontend for production"
    dir: frontend
    cmds:
      - npm run build
      - npm run export

  frontend:test:
    desc: "Run frontend tests"
    dir: frontend
    cmds:
      - npm test

  # Full deployment workflow
  deploy-all:
    desc: "Deploy infrastructure and frontend"
    cmds:
      - task: deploy
      - task: frontend:build
      - |
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name ShirayukiTomoFansiteStack \
          --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
          --output text)
        aws s3 sync frontend/out/ s3://$BUCKET_NAME/ --delete
      - |
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name ShirayukiTomoFansiteStack \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
          --output text)
        aws cloudfront create-invalidation \
          --distribution-id $DISTRIBUTION_ID \
          --paths "/*"